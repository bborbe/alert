// Copyright (c) 2024 Benjamin Borbe All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	monitoringbenjaminborbedev1 "github.com/bborbe/alert/k8s/apis/monitoring.benjamin-borbe.de/v1"
	scheme "github.com/bborbe/alert/k8s/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// AlertsGetter has a method to return a AlertInterface.
// A group's client should implement this interface.
type AlertsGetter interface {
	Alerts(namespace string) AlertInterface
}

// AlertInterface has methods to work with Alert resources.
type AlertInterface interface {
	Create(ctx context.Context, alert *monitoringbenjaminborbedev1.Alert, opts metav1.CreateOptions) (*monitoringbenjaminborbedev1.Alert, error)
	Update(ctx context.Context, alert *monitoringbenjaminborbedev1.Alert, opts metav1.UpdateOptions) (*monitoringbenjaminborbedev1.Alert, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*monitoringbenjaminborbedev1.Alert, error)
	List(ctx context.Context, opts metav1.ListOptions) (*monitoringbenjaminborbedev1.AlertList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *monitoringbenjaminborbedev1.Alert, err error)
	AlertExpansion
}

// alerts implements AlertInterface
type alerts struct {
	*gentype.ClientWithList[*monitoringbenjaminborbedev1.Alert, *monitoringbenjaminborbedev1.AlertList]
}

// newAlerts returns a Alerts
func newAlerts(c *MonitoringV1Client, namespace string) *alerts {
	return &alerts{
		gentype.NewClientWithList[*monitoringbenjaminborbedev1.Alert, *monitoringbenjaminborbedev1.AlertList](
			"alerts",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *monitoringbenjaminborbedev1.Alert { return &monitoringbenjaminborbedev1.Alert{} },
			func() *monitoringbenjaminborbedev1.AlertList { return &monitoringbenjaminborbedev1.AlertList{} },
		),
	}
}
