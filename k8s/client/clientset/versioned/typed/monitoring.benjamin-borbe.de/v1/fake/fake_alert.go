// Copyright (c) 2025 Benjamin Borbe All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/bborbe/alert/k8s/apis/monitoring.benjamin-borbe.de/v1"
	monitoringbenjaminborbedev1 "github.com/bborbe/alert/k8s/client/applyconfiguration/monitoring.benjamin-borbe.de/v1"
	typedmonitoringbenjaminborbedev1 "github.com/bborbe/alert/k8s/client/clientset/versioned/typed/monitoring.benjamin-borbe.de/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeAlerts implements AlertInterface
type fakeAlerts struct {
	*gentype.FakeClientWithListAndApply[*v1.Alert, *v1.AlertList, *monitoringbenjaminborbedev1.AlertApplyConfiguration]
	Fake *FakeMonitoringV1
}

func newFakeAlerts(fake *FakeMonitoringV1, namespace string) typedmonitoringbenjaminborbedev1.AlertInterface {
	return &fakeAlerts{
		gentype.NewFakeClientWithListAndApply[*v1.Alert, *v1.AlertList, *monitoringbenjaminborbedev1.AlertApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("alerts"),
			v1.SchemeGroupVersion.WithKind("Alert"),
			func() *v1.Alert { return &v1.Alert{} },
			func() *v1.AlertList { return &v1.AlertList{} },
			func(dst, src *v1.AlertList) { dst.ListMeta = src.ListMeta },
			func(list *v1.AlertList) []*v1.Alert { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.AlertList, items []*v1.Alert) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
