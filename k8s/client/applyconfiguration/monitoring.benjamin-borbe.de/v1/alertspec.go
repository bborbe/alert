// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// AlertSpecApplyConfiguration represents an declarative configuration of the AlertSpec type for use
// with apply.
type AlertSpecApplyConfiguration struct {
	Name        *string           `json:"name,omitempty"`
	Annotations map[string]string `json:"annotations,omitempty"`
	Expression  *string           `json:"expression,omitempty"`
	For         *string           `json:"for,omitempty"`
	Labels      map[string]string `json:"labels,omitempty"`
}

// AlertSpecApplyConfiguration constructs an declarative configuration of the AlertSpec type for use with
// apply.
func AlertSpec() *AlertSpecApplyConfiguration {
	return &AlertSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *AlertSpecApplyConfiguration) WithName(value string) *AlertSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *AlertSpecApplyConfiguration) WithAnnotations(entries map[string]string) *AlertSpecApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithExpression sets the Expression field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expression field is set to the value of the last call.
func (b *AlertSpecApplyConfiguration) WithExpression(value string) *AlertSpecApplyConfiguration {
	b.Expression = &value
	return b
}

// WithFor sets the For field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the For field is set to the value of the last call.
func (b *AlertSpecApplyConfiguration) WithFor(value string) *AlertSpecApplyConfiguration {
	b.For = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *AlertSpecApplyConfiguration) WithLabels(entries map[string]string) *AlertSpecApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}
